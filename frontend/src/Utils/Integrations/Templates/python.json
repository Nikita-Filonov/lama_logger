{
  "logger": "from utils.logger import LamaLogger\n\nlogger = LamaLogger(token='<your_token>', project_id=<project_id>)",
  "methods": "def link_pattern(request_id):\n    request_link = logger.endpoint + f'/projects/{logger.project_id}/?requestId={request_id}'\n    return f'<head></head><body><a href=\"{request_link}\" target=\"_blank\">{request_link}</a></body>'\n\n\ndef response_middleware(response):\n    request_id = str(uuid.uuid4())\n    setattr(response, 'request_id', request_id)\n    allure.attach(link_pattern(request_id), 'Logs', allure.attachment_type.HTML)\n    logger(response)\n\n\ndef get(url, params=None, **kwargs):\n    response = requests.get(url, params=params, stream=True, **kwargs)\n    response_middleware(response)\n    return response\n\n\ndef post(url, data=None, json=None, **kwargs):\n    response = requests.post(url, data=data, json=json, stream=True, **kwargs)\n    response_middleware(response)\n    return response\n\n\ndef patch(url, data=None, **kwargs):\n    response = requests.patch(url, data=data, stream=True, **kwargs)\n    response_middleware(response)\n    return response\n\n\ndef put(url, data=None, **kwargs):\n    response = requests.put(url, data=data, stream=True, **kwargs)\n    response_middleware(response)\n    return response\n\n\ndef delete(url, **kwargs):\n    response = requests.delete(url, stream=True, **kwargs)\n    response_middleware(response)\n    return response",
  "sdk": "import json\nimport os\nimport threading\n\nimport requests\nfrom requests import Response\n\nAPI_VERSION = 'v1'\nLOGGER_ENDPOINT = os.environ.get('LAMA_LOGGER_ENDPOINT', 'http://localhost:8000')\n\n\nclass LamaLogger:\n    endpoint = LOGGER_ENDPOINT\n    api = f'{LOGGER_ENDPOINT}/api/{API_VERSION}'\n\n    def __init__(self, token, project_id):\n        self._token = token\n        self.project_id = project_id\n\n    def __call__(self, response: Response):\n        thread = threading.Thread(target=self.__send_logs, args=(response,))\n        thread.start()\n\n    @property\n    def __headers(self):\n        return {\n            'Content-Type': 'application/json',\n            'Authorization': f'Token {self._token}'\n        }\n\n    @staticmethod\n    def __to_payload(response: Response) -> dict:\n        try:\n            response_body = response.json()\n        except json.decoder.JSONDecodeError:\n            response_body = response.content.decode('utf-8')\n\n        return {\n            'requestId': response.request_id,\n            'method': response.request.method,\n            'requestUrl': response.request.url,\n            'requestHeaders': dict(response.request.headers),\n            'requestBody': response.request.body,\n            'statusCode': response.status_code,\n            'responseBody': json.dumps(response_body),\n            'responseHeaders': dict(response.headers),\n        }\n\n    def __send_logs(self, response: Response):\n        payload = self.__to_payload(response)\n        requests.post(\n            self.api + f'/projects/{self.project_id}/requests/create/',\n            data=json.dumps(payload),\n            headers=self.__headers\n        )"
}
